#!/usr/bin/env python

from __future__ import print_function

import os, sys, argparse
  
minThreshold = 300000

#def warning(s):
#  print("Warning: "+s+"\n", file=sys.sterr) 

def parseArgs():
  parser = argparse.ArgumentParser()
  parser.add_argument("command", nargs='+',
    help="The command to launch with flexmem")
  parser.add_argument("-t", "--threshold", default=None,
    help="The threshold (in bytes) for filemapping allocated memory. "+
      "It must be greater than " + str(minThreshold) +".")
  parser.add_argument("-p", "--path-template", 
    default="/tmp/FlexmemTempFileXXXXXX")
  args = parser.parse_args()
#  if (args.p[-6:] != 'XXXXXX'):
#    args.p += "XXXXXX"
#    warning("Appending XXXXXX to path template")
#  if (args.t < minThreshold):
#    args.t = minThreshold
#    warning("Specified threshold was less than the minimum. It will be set to "+
#      str(minThreshold)
  return args

# Note that this is an initial version for the flexmem launcher.
# The launcher adds a preload environment variable to the shell, which
# points to the shared object file overriding C memory management 
# functions.

if __name__ == '__main__':
  if (os.uname()[0] != "Linux"):
    raise(Exception("Unsupported platform"))
    
  if not os.path.exists(flexmemSoPath):
    raise(Exception("The flexmem shared object file could not be found"))
  
  args = parseArgs()

  # The preload environment variable on the Mac is DYLD_INSERT_LIBRARIES.
  preloadVar = "LD_PRELOAD"
  flexmemSoPath = "/usr/local/lib/libflexmem.so"

  if preloadVar in os.environ.keys():
    os.environ[preloadVar] += flexmemSoPath
  else:
    os.environ[preloadVar] = flexmemSoPath

  os.system(reduce(lambda x, y: x+" "+y, args.command))

