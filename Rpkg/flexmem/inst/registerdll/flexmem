#!/usr/bin/env python

from __future__ import print_function

import os, sys, argparse, random, string
  
minThreshold = 300000

def warning(s):
  print("Warning: "+s+"\n", file=sys.sterr) 

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
  return ''.join(random.choice(chars) for x in range(size))

# XXX This may need to be rewritten to accomodate when the application being
# launched has its own program arguments.
def parseArgs():
  parser = argparse.ArgumentParser()
  parser.add_argument("command", nargs='+',
    help="The command to launch with flexmem")
  parser.add_argument("-t", "--threshold", nargs=1, default=None,
    help="The threshold (in bytes) for filemapping allocated memory. "+
      "It must be greater than " + str(minThreshold) +".")
  parser.add_argument("-d", "--directory-path", nargs=1, default="/tmp/",
    help="The directory where mapped files will be stored.")
  parser.add_argument("-f", "--file-name-template", nargs=1, default=None)
  parser.add_argument("-v", "--verbose", action="store_const", const=True, 
    default=False)
  args = parser.parse_args()
  if not args.file_name_template:
    args.file_name_template = id_generator()+"XXXXXX"
    if (args.verbose):
      print("Temporary file names will start with " + args.file_name_template)
  if args.file_name_template[-6:] != 'XXXXXX':
    args.file_name_template += "XXXXXX"
    warning("Appending XXXXXX to path template")
  if (args.threshold < minThreshold):
    args.threshold = minThreshold
    warning("Specified threshold was less than the minimum. It will be set to "+
      str(minThreshold))
  return args

if __name__ == '__main__':
  if (os.uname()[0] != "Linux"):
    raise(Exception("Unsupported platform"))
    
  args = parseArgs()

  # The preload environment variable on the Mac is DYLD_INSERT_LIBRARIES.
  preloadVar = "LD_PRELOAD"
  flexmemSoPath = "/usr/local/lib/libflexmem.so"
  
  if not os.path.exists(flexmemSoPath):
    raise(Exception("The flexmem shared object file could not be found"))
  
  if preloadVar in os.environ.keys():
    os.environ[preloadVar] += flexmemSoPath
  else:
    os.environ[preloadVar] = flexmemSoPath

  os.environ["FLEXMEMTEMPLATE"] = args.directory_path + args.file_name_template
  os.environ["FLEXMEMTHRESHOLD"] = args.threshold

  os.system(reduce(lambda x, y: x+" "+y, args.command))

